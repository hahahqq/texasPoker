import commonSend from "@/api/api";
// import { GET_LIST, ACTIONS_STATE } from "@/store/mutation-types";
import * as types from "@/store/mutation-types";
let selected = {};

// init state
const state = {
   actionsDataState: {},
   commonListState: {
      paying: {
         TotalNumber: 0,
         PageNumber: 0,
         PageSize: 20,
         PN: 0
      },
      List: []
   }
};

// getters
const getters = {
   actionsDataState: state => state.actionsDataState,
   commonListState: state => state.commonListState
};

// actions
let timeout = 300;
const getDataFun = function(t, commit, type, sendData) {
   let tName = t == 1 ? "GET_LIST_" : "ACTIONS_STATE_";
   selected = {
      idx: t,
      type: type,
      Mut: tName + type
   };
   sessionStorage.setItem(selected.Mut, 0);
   commonSend.commonSend(
      "get",
      data => {
         switch (type) {
            case "management":
               commit(types.ACTIONS_STATE_management, { data });
               break;
            case "match":
               commit(types.GET_LIST_match, { data });
               break;
            case "sale":
               commit(types.ACTIONS_STATE_sale, { data });
               break;
            case "member":
               commit(types.ACTIONS_STATE_member, { data });
               break;
            case "memberRecharge":
               commit(types.GET_LIST_memberRecharge, { data });
               break;
            default:
               commit(types[selected.Mut], { data });
         }
      },
      sendData
   );
};
const actions = {
   getList({ commit }, { type, sendData }) {
      if (!type) return;
      if (selected.type) {
         sessionStorage.setItem("GET_LIST_" + selected.type, 0);
         setTimeout(() => {
            getDataFun(1, commit, type, sendData);
         }, timeout);
      } else {
         getDataFun(1, commit, type, sendData);
      }
   },
   actionsData({ commit }, { type, sendData }) {
      if (!type) return;
      if (selected.type) {
         sessionStorage.setItem("ACTIONS_STATE_" + selected.type, 0);
         setTimeout(() => {
            getDataFun(2, commit, type, sendData);
         }, timeout);
      } else {
         getDataFun(2, commit, type, sendData);
      }
   }
};

// mutations
const dealDataFun = function(type, mutName, state, data) {
   let t = sessionStorage.getItem(mutName);
   console.log(99, t, mutName, selected);

   if (!t || (t && parseInt(t) == 0) || mutName != selected.Mut) return;
   console.log("ok");
   if (type == 1) {
      let pageData = Object.assign({}, state.commonListState.paying),
         arr = [];
      if (data.success) {
         pageData = Object.assign(pageData, data.data.PageData);
         arr = [...pageData.DataArr];
      }
      state.commonListState = Object.assign({}, data, {
         paying: pageData,
         List: arr,
         type: selected.type
      });
   } else {
      state.actionsDataState = Object.assign({}, data, selected);
   }
   selected = {};
};
const mutations = {
   [types.ACTIONS_STATE_management](state, { data }) {
      let mutName = "ACTIONS_STATE_management";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_managementA](state, { data }) {
      let mutName = "GET_LIST_managementA";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_managementB](state, { data }) {
      let mutName = "GET_LIST_managementB";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_managementC](state, { data }) {
      let mutName = "GET_LIST_managementC";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_managementD](state, { data }) {
      let mutName = "GET_LIST_managementD";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_managementE](state, { data }) {
      let mutName = "GET_LIST_managementE";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_managementF](state, { data }) {
      let mutName = "GET_LIST_managementF";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.ACTIONS_STATE_balance](state, { data }) {
      let mutName = "ACTIONS_STATE_balance";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_balanceA](state, { data }) {
      let mutName = "GET_LIST_balanceA";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_balanceB](state, { data }) {
      let mutName = "GET_LIST_balanceB";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_balanceC](state, { data }) {
      let mutName = "GET_LIST_balanceC";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_balanceD](state, { data }) {
      let mutName = "GET_LIST_balanceD";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_balanceE](state, { data }) {
      let mutName = "GET_LIST_balanceE";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_balanceF](state, { data }) {
      let mutName = "GET_LIST_balanceF";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_balanceG](state, { data }) {
      let mutName = "GET_LIST_balanceG";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.ACTIONS_STATE_cashier](state, { data }) {
      let mutName = "ACTIONS_STATE_cashier";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_match](state, { data }) {
      console.log("kkkkk-1", data);
      let mutName = "GET_LIST_match";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.ACTIONS_STATE_matchItem](state, { data }) {
      let mutName = "ACTIONS_STATE_matchItem";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_matchProList](state, { data }) {
      let mutName = "GET_LIST_matchProList";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_matchCheckIn](state, { data }) {
      let mutName = "GET_LIST_matchCheckIn";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.ACTIONS_STATE_hour](state, { data }) {
      let mutName = "ACTIONS_STATE_hour";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.ACTIONS_STATE_week](state, { data }) {
      let mutName = "ACTIONS_STATE_week";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_fast](state, { data }) {
      let mutName = "GET_LIST_fast";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.ACTIONS_STATE_sale](state, { data }) {
      let mutName = "ACTIONS_STATE_sale";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_saleItem](state, { data }) {
      let mutName = "GET_LIST_saleItem";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_goods](state, { data }) {
      let mutName = "GET_LIST_goods";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_goodsItem](state, { data }) {
      let mutName = "GET_LIST_goodsItem";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_shop](state, { data }) {
      let mutName = "GET_LIST_shop";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.ACTIONS_STATE_member](state, { data }) {
      let mutName = "ACTIONS_STATE_member";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(2, mutName, state, data);
   },
   [types.GET_LIST_memberRegister](state, { data }) {
      let mutName = "GET_LIST_memberRegister";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_memberRegisterItem](state, { data }) {
      let mutName = "GET_LIST_memberRegisterItem";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_memberRecharge](state, { data }) {
      console.log("kkkk-222", data);
      let mutName = "GET_LIST_memberRecharge";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_memberAward](state, { data }) {
      let mutName = "GET_LIST_memberAward";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_goodsSale](state, { data }) {
      let mutName = "GET_LIST_goodsSale";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_goodsSaleA](state, { data }) {
      let mutName = "GET_LIST_goodsSaleA";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_goodsSaleB](state, { data }) {
      let mutName = "GET_LIST_goodsSaleB";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_goodsSaleC](state, { data }) {
      let mutName = "GET_LIST_goodsSaleC";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_adjust](state, { data }) {
      let mutName = "GET_LIST_adjust";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   },
   [types.GET_LIST_award](state, { data }) {
      let mutName = "GET_LIST_award";
      sessionStorage.setItem(mutName, 1);
      dealDataFun(1, mutName, state, data);
   }
};

export default {
   state,
   getters,
   actions,
   mutations
};
