<template>
    <div class="Recharge">
        <el-row :gutter="10">
            <el-col :xs="24" :sm="12" :md="12" style="position: relative;">
                <div class="row-flex flex-between flex-items-center border-bottom rleft-li">
                    <span class="title">本单合计</span>
                    <span class="font-16">{{totalprice.price|money}}</span>
                </div>
                <div
                    class="row-flex flex-between flex-items-center border-bottom rleft-li"
                >
                    <div>
                        <span class="title">{{payName}}</span>
                    </div>
                    <div v-if="disabled">
                        <span class="font-16" style="cursor: no-drop;">{{payprice|money}}</span>
                        <span v-if="!isAllowClick" class="p-left-xs text-theme2">(余额不足)</span>
                    </div>
                    <div v-else>
                        <input
                            class="cash font-16 no-border text-right block full-width block"
                            v-model="payprice"
                            @keyup="handleInput3"
                            placeholder="0.00"
                            ref="cash"
                        />
                    </div>
                </div>
                <div class="border-bottom rleft-li dateborder" v-if="allowsaledate">
                    <el-row>
                        <el-col :span="12">
                            <span class="title">{{totalprice.title}}</span>
                        </el-col>
                        <el-col :span="12" style="text-align: right">
                        <el-date-picker
                            style="width:73px"
                            class="datename"
                            v-model="value1"
                            format="yyyy-MM-dd"
                            value-format="yyyy-MM-dd"
                            type="date"
                            prefix-icon="1"
                            clear-icon="2"
                        >
                        </el-date-picker>
                        </el-col>
                    </el-row>
                </div>
                <div v-if="rechargeListList.length>0" class="row-flex flex-between flex-items-center rleft-li">
                    <div>
                        <span class="font-16">
                            找零
                            <i class="Givechange">{{pocketmoney|money}}</i>
                        </span>
                    </div>
                </div>
                <div style="position: absolute;top:300px;" v-if="shopIntegral.ISPAYINTEGRAL==true && shopIntegral.INTEGRALRATE != 0 && this.isselectvip !='' ">
                    <el-checkbox v-model="checkedintegral" @change="checkedIntegral">
                    <span>可使用</span>
                    <el-input v-model="integralArrive" size="mini" :disabled="true" style="width:80px;"></el-input>
                    </el-checkbox>
                    <span style="color:#2589FF" @click="showIntegral=true">调整</span>
                    <span>积分抵&nbsp;&nbsp;{{integralMoney}}元</span>
                </div>
            </el-col>
            <el-col
                :xs="24"
                :sm="12"
                :md="12"
                class="spaceBorder-left p-bottom-sm"
                v-if="rechargeListList.length>0"
            >
                <div class="rleft-li">选择支付方式</div>
                <div class="rright">
                    <a
                        class="rright-li"
                        v-for="(item,index) in rechargeListList"
                        v-if="isClickRL(item)"
                        :key="index"
                        @click="toggletab(index,item)"
                    >
                        <img :src="item.payerIMG" alt />
                        <div>{{item.NAME}}</div>
                        <i
                            v-if="curtab==index"
                            :class="{'selected':curtab==index}"
                            class="el-icon-circle-check"
                        ></i>
                    </a>
                </div>
                <div class="Rechargeright_f">
                    <el-checkbox v-model="checkedreceipt">打印小票</el-checkbox>
                    <el-checkbox v-model="IsSms" class="pull-right">短信通知</el-checkbox>
                </div>
            </el-col>
        </el-row>
        <div style=" margin:0 -20px;  border-top: 6px solid rgb(224, 220, 220);"></div>
        <!-- foot -->
        <div class="row-flex flex-between flex-items-center p-top-sm">
            <div class>
                <span>实收</span>
                <strong id="netreceiptsmoney">￥{{receivableprice|money}}</strong>
            </div>
            <div class v-if="rechargestatus==4 ? false :true">
                <span>获得积分</span>
                <strong id="Obtainintegral">{{gerintegral|money}}</strong>
                <el-select v-model="value" placeholder="请选择积分" @change="payGetintegral">
                    <el-option
                        v-for="item in integraltList"
                        :key="item.ID"
                        :label="item.NAME"
                        :value="item.RATE"
                    ></el-option>
                </el-select>
            </div>
            <div>
                <el-button type="info" @click="closeModal">取消</el-button>
                <el-button type="danger" @click="onSubmit" v-if="isAllowClick">确认支付</el-button>
                <el-button type="danger" disabled v-else>确认支付</el-button>
            </div>
        </div>
        <div class="footersock" style="width:100%; display:table; font-size:10px" v-if='(totalprice - ZEROTYPE ) * 1000000000 / 1000000000 != 0'>
        已抹零  ￥{{( parseFloat(totalprice.price) - parseFloat(ZEROTYPE)).toFixed(2) }}
        </div>

        <!-- 扫描支付 -->
        <el-dialog
            v-if="showbarCodePay"
            title="扫码支付"
            :visible.sync="showbarCodePay"
            width="550px"
            append-to-body
        >
            <barCodePay
                :paytypeid="PaytypeId"
                :billmoney="receivableprice"
                @barcodePayclick="barcodePaycomback"
            ></barCodePay>
        </el-dialog>

        <!-- 优惠券 -->
        <el-dialog
            title="输入抵现积分"
            :visible.sync="showIntegral"
            width="30%"
            append-to-body
        >
        <div>
            <el-input v-model="inputIntegral" size="mini"></el-input>
            <div style="text-align:center;margin-top:50px;">
                <el-button size="mini" @click="showIntegral = false">取 消</el-button>
                <el-button size="mini" type="primary" @click="integralChange()">确定</el-button>
            </div>
        </div>
        </el-dialog>
    </div>
</template>
<script>
import { mapState, mapGetters } from "vuex";
import { nscreenexCodeFun } from "@/util/objectivity";
import barCodePay from "@/components/Recharge/barCodePay";
import CouponList from "@/components/Recharge/CouponList";
import { getOthersData, setOthersData } from "@/api/index";
import CRYPTO from "crypto-js";
export default {
    name: "Recharge",
    props: {
        totalprice: {
            type: Object,
            default: {
                price: 0,
                discount: 0,
                title:'',
            }
        },
        rechargestatus: {
            type: [String, Number],
            default: 0
        },
        isselectvip: {
            type: Object,
            default: ""
        }
    },
    data() {
        return {
            discountMoney: "",
            paytypeMoney: "0.00",
            checkedreceipt: getOthersData().isprint ? true : false,
            IsSms: false,
            integraloptions: [],
            value: "",
            payName: "",
            disabled: true,
            curtab: 0,
            receivableprice:
                parseFloat(this.totalprice.price),// 实收
            payprice:
                parseFloat(this.totalprice.price), // 支付方式金额
            pocketmoney: "0.00",
            gerintegral:
                parseFloat(this.totalprice.price), // 积分
            PaytypeId: "",
            showbarCodePay: false,
            showIntegral: false,
            barcodepaystatus: "",
            couponcodemoney: 0,
            couponcode: "",
            isAllowClick: true,
            value1:'',
            value2:'',
            checkedintegral:false,
            inputIntegral:'',
            shopIntegral:{
                ISPAYINTEGRAL:'',
                INTEGRALRATE:'',
            },
            integralArrive:'',
            integralMoney:'',
            integralpayMoney:'',
            allowsaledate:'',
            ZEROTYPE:0,
        };
    },
    computed: {
        ...mapGetters({
            selmember: "selmember",
            rechargeListList: "rechargeListList",
            integraltList: "integraltList",
            barcodepayopenState: "barcodepayopenState",
            gparameterstate: "gparameterstate",
            memberQRcodeurlstate:"memberQRcodeurlstate"
        })
    },
    watch: {
        memberQRcodeurlstate(data){
            console.log(data.BarCode)
        },
        rechargeListList(data) {
            console.log("支付方式的排序有对吗",data)
            this.payName = data[0].NAME;
            this.PaytypeId = data[0].ID;
            this.isAllowClickFun();
        },
        barcodepayopenState(data) {
            if (data.success) {
                let IsCheck = data.data.IsCheck;
                if (IsCheck) {
                    this.showbarCodePay = true;
                } else {
                    this.$message("请联系客服开通扫码支付");
                    return;
                }
            }
        },
        gparameterstate(data) {
            let zeroterpees
            if (
                data.success &&
                Object.keys(data.data.CompanyConfig).length > 0
            ) {
                let RATE = data.data.CompanyConfig.INTEGRALTYPERATE;
                this.value = RATE;
                this.shopIntegral.ISPAYINTEGRAL=data.data.CompanyConfig.ISPAYINTEGRAL
                this.shopIntegral.INTEGRALRATE=data.data.CompanyConfig.INTEGRALRATE
                this.selectGetintegral(this.shopIntegral.INTEGRALRATE);
                let payIntegral=data.data.CompanyConfig.INTEGRALTYPERATE;
                console.log(payIntegral)

                this.payGetintegral(payIntegral)
                this.allowsaledate=data.data.CompanyConfig.ALLOWSALEDATE
                console.log("配置信息",data.data.CompanyConfig.ZEROTYPE)
                zeroterpees=data.data.CompanyConfig.ZEROTYPE;
                let  autosendpaysms=data.data.CompanyConfig.AUTOSENDPAYSMS;
                console.log(autosendpaysms)
                this.IsSms=autosendpaysms;

                if(zeroterpees==0){
                    console.log("输出的参数是多少",zeroterpees)
                    this.receivableprice = this.totalprice.price
                    this.payprice = this.totalprice.price
                    this.ZEROTYPE = this.totalprice.price
                }else if(zeroterpees==1){
                    this.receivableprice = parseInt(this.totalprice.price)
                    this.payprice = parseInt(this.totalprice.price)
                    this.ZEROTYPE = parseInt(this.totalprice.price)
                }else if(zeroterpees == 2){
                    this.receivableprice = parseInt(this.totalprice.price * 10) / 10
                    this.payprice = parseInt(this.totalprice.price * 10) / 10
                    this.ZEROTYPE = parseInt(this.totalprice.price * 10) / 10
                }else if(zeroterpees == 3){
                    this.receivableprice = parseInt(Math.round(this.totalprice.price))
                    this.payprice = parseInt(Math.round(this.totalprice.price))
                    this.ZEROTYPE = parseInt(Math.round(this.totalprice.price))
                }else if(zeroterpees == 4){
                    this.receivableprice = parseFloat(this.totalprice.price).toFixed(1)
                    this.payprice = parseFloat(this.totalprice.price).toFixed(1)
                    this.ZEROTYPE = parseFloat(this.totalprice.price).toFixed(1)
                }
                console.log("抹零的值是多少的",this.ZEROTYPE)
            }
        },
    },
    methods: {
        showKeXianFun() {
            nscreenexCodeFun(4, String(this.totalprice.price));
        },
        closeModal(type) {
            nscreenexCodeFun(6);
            if (type == "resetList") {
                this.$emit("resetList");
            } else {
                this.$emit("closeModalrecharge");
            }
        },
        toggletab(index, item) {
            this.curtab = index;
            this.PaytypeId = item.ID;
            this.payName = item.NAME;
            if (item.NAME == "现金") {
                this.disabled = false;
                this.payprice = parseFloat(this.payprice).toFixed(2);
                this.$nextTick(() => {
                    this.$refs["cash"].focus();
                });
            } else {
                this.payprice = parseFloat(this.receivableprice).toFixed(2);
                this.disabled = true;
                this.pocketmoney = "0.00";
            }
            this.isAllowClickFun();
        },
        isCouponListclick(data) {
            if (JSON.stringify(data) != "{}") {
                this.couponcodemoney = parseFloat(data.couponcodemoney).toFixed(
                    2
                );
                this.couponcode = data.couponcode;
                let totleMoney = (
                    this.totalprice.price - this.discountMoney
                ).toFixed(2);
                this.receivableprice = (
                    totleMoney - this.couponcodemoney
                ).toFixed(2);
                this.payprice = parseFloat(
                    totleMoney - this.couponcodemoney
                ).toFixed(2);
                this.gerintegral = Math.ceil(totleMoney - this.couponcodemoney);
                nscreenexCodeFun(4, this.receivableprice);
            }
            this.showCouponList = false;
        },
        delcoupon() {
            this.couponcode = "";
            this.couponcodemoney = 0;
            let totlePrice = (
                this.totalprice.price -
                this.discountMoney -
                this.couponcodemoney
            ).toFixed(2);
            this.receivableprice = parseFloat(totlePrice);
            this.payprice = parseFloat(totlePrice);
            this.gerintegral = Math.ceil(totlePrice);
            nscreenexCodeFun(4, this.receivableprice);
        },
        handleInput2(e) {
            this.discountMoney = this.onlyInputnumber(this.discountMoney);
            let totlePrice = (
                this.totalprice.price -
                this.discountMoney -
                this.couponcodemoney
            ).toFixed(2);
            this.receivableprice = parseFloat(totlePrice);
            this.payprice = parseFloat(totlePrice);
            this.gerintegral = Math.ceil(totlePrice);
            nscreenexCodeFun(4, this.receivableprice);
        },
        handleInput3(e) {
            this.payprice = this.onlyInputnumber(this.payprice);
            this.pocketmoney = parseFloat(
                this.payprice - this.receivableprice
            ).toFixed(2);
        },
        selectGetintegral(value) {
            console.log("value")
            console.log(value +'积分抵扣1元')
            console.log('会员积分'+this.totalprice.integral)
            let moneys
             moneys= this.totalprice.integral/value
            console.log('总积分能兑换多少钱' +  moneys)
            console.log('现在的商品总价格是' +  this.totalprice.price)
            if(moneys<=this.totalprice.price){
                this.integralArrive=this.totalprice.integral
                this.integralMoney=moneys
            }else if(moneys>=this.totalprice.price){
                this.integralArrive=(this.totalprice.price*value)
                this.integralMoney=this.totalprice.price;
            }
            console.log('实际能抵扣多少积分'+ this.integralArrive)
        },
        integralChange(){
            console.log(this.inputIntegral)
            if(this.inputIntegral<=this.integralArrive){
                this.integralArrive=this.inputIntegral;
                this.integralMoney=this.inputIntegral/this.shopIntegral.INTEGRALRATE;
                this.showIntegral=false;
                this.checkedintegral=false;
                this.receivableprice=this.totalprice.price
                this.gerintegral=this.totalprice.price
            }else{
                this.$message({
                message: '输入的积分不可以大于实际能抵扣的积分',
                type: 'warning'
                });
                return;
            }
        },
        payGetintegral(value){
          this.gerintegral = Math.floor(this.receivableprice * value);
        },

        checkedIntegral(data){
            if(data==true){
                this.receivableprice=this.totalprice.price-this.integralMoney;
                this.gerintegral=(this.totalprice.price-this.integralMoney)*this.value;
                this.integralpayMoney=this.integralMoney
            }else{
                this.receivableprice=this.totalprice.price
                this.gerintegral=this.totalprice.price*this.value
                 this.integralpayMoney='';
            }
            console.log("this.totalprice.price")
            console.log(this.totalprice.price)
        },

        onSubmit() {
            console.log("是什么支付方式呢",this.PaytypeId)
            if (!this.PaytypeId) {
                this.$message.error("请选择支付方式");
                return;
            }
            if (this.PaytypeId == "-199" || this.PaytypeId == "-99") {
                console.log("99885555",this.isselectvip.ISUSEPASSWD)
                 console.log("9988",this.isselectvip.PASSWORD)
                if (
                    Object.keys(this.isselectvip).length > 0 &&
                    this.isselectvip.ISUSEPASSWD &&
                    this.isselectvip.PASSWORD
                ) {
                    let pwd = this.isselectvip.PASSWORD
                        ? this.isselectvip.PASSWORD
                        : "";

                    this.$prompt("请输入会员密码", "提示", {
                        confirmButtonText: "确定",
                        cancelButtonText: "取消",
                        inputType:"password",
                        inputPattern:/^\d{6}$/,
                        inputPlaceholder:'请输入六位数的密码',
                        inputErrorMessage:'请输入六位数的密码'
                    }).then(({ value }) => {
                        let cpwd = value != '' ? CRYPTO.MD5(value).toString() : "";
                        if (cpwd == pwd) this.CashPayok();

                        else this.$message.error("密码错误");
                    }).catch(() => {
                        
                    });
                } else {
                    this.CashPayok();
                }
            } else {
                this.CashPayok();
            }
        },


        CashPayok() {
               let date=new Date()
               let dateHours = date.getHours();              
               let dateMinutes = date.getMinutes();
               let dateSeconds = date.getSeconds();    
               let logtime=this.value1 + ' ' + dateHours + ':' + dateMinutes + ':' + dateSeconds;
               let getlogtime=(new Date(logtime)).getTime()
               this.value2=getlogtime;

            // return;

            if (this.checkedreceipt) {
                this.$store.state.recharge.isPrintsatus = true;
            } else {
                this.$store.state.recharge.isPrintsatus = false;
            }

            console.log(this.barcodepaystatus)
            if (this.payName == "扫码支付" && this.barcodepaystatus != 1) {
                this.$store
                    .dispatch("getbarcodepayopenState", {})
                    .then(() => {});
                return;
            }
            nscreenexCodeFun(5);
            this.barcodepaystatus = "";
            let IsSms = this.IsSms == true ? 1 : 0;

            let comdata = {
                PaytypeId: this.PaytypeId,
                GetIntegral: Math.ceil(this.gerintegral),
                IsSms: IsSms,
                PayIntegral: this.checkedintegral==true ? Math.round(this.integralArrive) : '',
                IntegralMoney: this.integralpayMoney,
            };

            switch (this.rechargestatus) {
                case 1:
                    break;
                case 2:
                    break;
                case 3:
                    comdata = Object.assign({}, comdata, {
                        Money: Number(this.receivableprice),
                        DiscountMoney: Number(this.discountMoney),
                        BillDate:this.value2,
                    });
                    break;
                case 4:
                    comdata = {
                        PayTypeId: this.PaytypeId,
                        IsSms: IsSms,
                        AddMoney: Number(this.receivableprice),
                        BillDate:this.value2,
                    };
                    break;
                case 5:
                    comdata = Object.assign({}, comdata, {
                        // FavorMoney: Number(this.discountMoney),
                        PayMoney: Number(this.receivableprice),
                        IsCheck: 1,
                        AddMoney: Number(this.receivableprice),
                        PayTypeID: this.PaytypeId,
                        BillDate:this.value2,
                    });
                    break;
                case 6:
                    comdata = {
                        PayTypeID: this.PaytypeId,
                        IsSmd: IsSms,
                        AddMoney: Number(this.receivableprice),
                        GiftMoney: Number(this.discountMoney),
                        GetIntegral: Math.ceil(this.gerintegral),
                        BillDate:this.value2,
                    };
                    break;
                default:
                    comdata = Object.assign({}, comdata, {
                        // FavorMoney: Number(this.discountMoney),
                        PayMoney: Number(this.receivableprice),
                        IsCheck: 1,
                        BillDate:this.value2,
                    });
            }

            this.$emit("CashRecharge", comdata);
        },
        barcodePaycomback(data) {
            this.barcodepaystatus = 1;
            this.CashPayok();
        },
        isClickRL(item) {
            if (this.isselectvip == "" && item.NAME == "欠款") return false;
            return true;
        },
        isAllowClickFun() {
            this.isAllowClick = true;
            if (this.rechargeListList.length == 0) this.isAllowClick = false;
            let dd = this.isselectvip == "" ? 0 : this.selmember.MONEY;

            if (
                this.rechargeListList[this.curtab].NAME == "余额支付" &&
                this.payprice > dd
            )
                this.isAllowClick = false;
        }
    },
    components: {
        barCodePay,
        CouponList
    },
    mounted() {
        let date = new Date();
        let dateYear = date.getFullYear();              
        let dateMonth = date.getMonth() + 1; 
        console.log(dateMonth)                
        let dateDate = date.getDate(); 

        this.value1= dateYear + '-' + dateMonth + '-' + dateDate,
        console.log(this.value1)
        this.$store.dispatch("getrechargeList", {
            codestatus: this.isselectvip != "" ? 1 : "",
            IsHide:'0'
        });
        this.$store.dispatch("getintegralTList", {});
        this.$store.dispatch("getparameterstate");
    }
};
</script>

<style scoped>
.rleft-li {
    line-height: 40px;
    padding: 0 10px;
}
.rleft-li .title {
    min-width: 90px;
}
.rleft-li > input {
    height: 40px;
}

.rright {
    height: 260px;
    overflow-x: hidden;
    overflow-y: auto;
}
.rright-li {
    position: relative;
    display: inline-block;
    padding: 2px;
    border: 1px solid #f1a027;
    overflow: hidden;
    background: #fffff1;
    border-radius: 5px;
    width: 21%;
    text-align: center;
    margin-top: 10px;
    margin-left: 10px;
    cursor: pointer;
}
.rright-li img {
    width: 35px;
    height: 35px;
    margin-top: 5px;
}
.rright-li .selected {
    position: absolute;
    color: #ff5722;
    top: 0px;
    right: 1px;
    font-size: 18px;

}

.spaceBorder-left {
    border-left: 6px solid rgb(224, 220, 220);
}
.dateborder >>>.el-input__inner{
    border: solid 1px #fff!important;
    padding-right: 0px!important;
    padding-left: 0px!important;
    padding: 0px!important;
    
}
/* .dateborder{
    position: relative;
}
.datename{
    position: absolute;
    right: 0px;
} */
</style>
