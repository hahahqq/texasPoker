<template>
  <div class="report row-flex flex-start">
    <section style="min-width:130px;margin-left:-10px;">
      <sidebarMenu :activePath="activePath" :routesList="routesList" :width="130"></sidebarMenu>
    </section>
    <section class="bg-white marginLR-sm paddingTB-sm paddingLR-md full-width" v-loading="loading">
      <div class="marginTB-sm">
        <el-button-group>
          <el-button
            plain
            type="primary"
            size="small"
            @click="ruleFrom.Type=0;getNewData()"
            :class="{'isActive':ruleFrom.Type==0}"
          >日报</el-button>
          <el-button
            plain
            type="primary"
            size="small"
            @click="ruleFrom.Type=1;getNewData()"
            :class="{'isActive':ruleFrom.Type==1}"
          >月报</el-button>
        </el-button-group>
        <el-dropdown @command="shopCheckfun" class="m-left-sm pull-right">
          <el-button type="primary" size="small">
            <span v-text="shopCheckText?shopCheckText:'请选择店铺'"></span>
            <i class="el-icon-arrow-down el-icon--right"></i>
          </el-button>
          <el-dropdown-menu slot="dropdown">
            <!-- <el-dropdown-item :command="-1">全部</el-dropdown-item> -->
            <el-dropdown-item v-for="(item,i) in shopList" :key="i" :command="i">{{item.NAME}}</el-dropdown-item>
          </el-dropdown-menu>
        </el-dropdown>
      </div>
      <!-- table-->
      <el-table
        border
        :data="tebleList"
        header-row-class-name="bg-theme text-white"
        class="full-width"
        max-height="500"
      >
        <el-table-column prop="RN" label="排名" width="80"></el-table-column>
        <el-table-column prop="BILLDATE" label="日期"></el-table-column>
        <el-table-column label="会员数">
          <template slot-scope="props">
            <span>{{props.row.VIPCOUNT}}</span>
            <el-progress
              :text-inside="true"
              :stroke-width="18"
              :percentage="props.row.VIPCOUNT/TotalNumber"
              :color="getColor(props.row.VIPCOUNT*100/TotalNumber)"
            ></el-progress>
          </template>
        </el-table-column>
        <el-table-column label="占比">
          <template slot-scope="props">
            <span>{{props.row.VIPCOUNT*100/TotalNumber}}%</span>
          </template>
        </el-table-column>
        <el-table-column prop="VIPCOUNT" label="单据数量"></el-table-column>
        <el-table-column label="更多" width="80">
          <template slot-scope="props">
            <el-button type="text" @click="getNewItem(props.row.BILLDATE)" class="no-padding">详情</el-button>
          </template>
        </el-table-column>
      </el-table>
      <!-- 分页 -->
      <div v-show="tebleList.length>0" class="m-top-sm clearfix elpagination">
        <el-pagination
          @size-change="handlePageChange"
          @current-change="handlePageChange"
          :current-page.sync="pagination.PN"
          :page-size="pagination.PageSize"
          layout="prev, pager, next, jumper"
          :total="pagination.TotalNumber"
          class="text-center"
        ></el-pagination>
        <div class="text-center clearfix">
          <span class="inline-block">共{{pagination.TotalNumber}}条，每页{{pagination.PageSize}}条</span>
        </div>
      </div>
    </section>
    <el-dialog :title="title" :visible.sync="isShowList" width="90%" style="max-width:100%;">
      <listPage @closeModal="isShowList=false" :dataType="{'data':ruleFrom2,'state':isShowList}">
        <div>合计人数: {{TotalQty}}</div>
      </listPage>
    </el-dialog>
  </div>
  <!-- 会员注册统计 -->
</template>
<script>
import { mapState, mapGetters } from "vuex";
import MIXINS_REPORT from "@/mixins/report";
import MIXINS_INDEX from "@/mixins/index";
import { getHomeData } from "@/api/index";
export default {
  mixins: [MIXINS_REPORT.SIDERBAR_MENU],
  data() {
    return {
      ruleFrom: {
        ShopId: "",
        Type: 0
      },
      ruleFrom2: {},
      isShowList: false,
      loading: false,
      title: "",
      pageList: [],
      tebleList: [],
      pagination: {
        TotalNumber: 0,
        PageNumber: 0,
        PageSize: 20,
        PN: 0
      },
      pageData: { PN: 1 },
      TotalNumber: 1,
      TotalQty: 0,
      shopCheckText: "",
      shopCheckidx: ""
    };
  },
  computed: {
    ...mapGetters({
      dataData: "registeredReportData",
      dataState: "registeredReportState",
      dataList: "registeredReportList",
      dataListState: "registeredReportListState",
      dataListArr: "registeredReportListARR",
      shopList: "shopList"
    })
  },
  watch: {
    dataListState(data) {
      this.loading = false;
      if (data.success) {
        if (this.dataListArr[this.ruleFrom2.obj.index].List.length == 0) {
          this.$message(this.title + "，暂时没有数据");
        } else {
          this.TotalQty = data.data.TotalQty;
          this.isShowList = true;
        }
      } else {
        this.$message.error(data.message);
      }
    },
    dataState(data) {
      this.loading = false;
      if (data.success) {
        this.defaultData();
      }
    }
  },
  methods: {
    getNewData() {
      this.$store.dispatch("clearregisteredReportList2").then(() => {
        this.$store.dispatch("getregisteredReportData", this.ruleFrom);
        this.loading = true;
        this.pageData.PN = 1;
      });
    },
    getNewItem(dateStr) {
      // 详细
      let index = 0;
      let sendData = {
        obj: { index: index, obj: "registered" },
        data: Object.assign({}, this.ruleFrom, { str: dateStr })
      };
      this.ruleFrom2 = Object.assign({}, sendData);
      this.$store.dispatch("clearregisteredReportList", index).then(() => {
        this.$store.dispatch("getregisteredReportList", sendData);
        this.title = this.dataListArr[index].title;
      });
    },
    handlePageChange: function(currentPage) {
      if (this.pageData.PN == currentPage || this.loading) {
        return;
      }
      this.pageData.PN = parseInt(currentPage);
      this.$store
        .dispatch(
          "getregisteredReportData",
          Object.assign({}, this.ruleFrom, this.pageData)
        )
        .then(() => {
          this.loading = true;
        });
    },
    defaultData() {
      this.tebleList = [...this.dataData.List];
      this.pagination = {
        TotalNumber: this.dataData.paying.TotalNumber,
        PageNumber: this.dataData.paying.PageNumber,
        PageSize: this.dataData.paying.PageSize,
        PN: this.dataData.paying.PN
      };
      this.pageData.PN = this.dataData.paying.PN;
      this.TotalNumber = this.dataData.paying.TotalNumber;
    },
    formatSex: function(row, column) {
      return row.SEX == 1 ? "女" : "男";
    },
    getColor: function(v) {
      if (v > 75) {
        return "#67c23a";
      } else if (v > 50) {
        return "rgba(142, 113, 199, 0.7)";
      } else if (v > 25) {
        return "#409eff";
      } else {
        return "#f56c6c";
      }
    },
    shopCheckfun(index) {
      if (index == -1) {
        this.shopCheckidx = -1;
        this.shopCheckText = "全部店铺";   
        this.ruleFrom.ShopId = "";
      } else {
        this.shopCheckidx = index;
        this.shopCheckText = this.shopList[index].NAME;
        this.ruleFrom.ShopId = this.shopList[index].ID;
      }
      this.getNewData();
    }
  },
  
  // beforeCreate() {
  //   this.$store.dispatch("getregisteredReportData", {});
  // },
  created() {
    this.$store.dispatch("getregisteredReportData", {
                ShopId: this.theShopId,
                BeginDate: this.getTimeStamp(),
                EndDate: new Date().getTime()
            }).then(() => {
        this.loading = true;
         this.ruleFrom = {
                    ShopId: this.theShopId,
                    BeginDate: this.getTimeStamp(),
                    EndDate: new Date().getTime()
                }
        this.shopCheckText = getHomeData().shop.NAME
    });
  },
  components: {
    listPage: () => import("@/components/reports/management/tableList")
  }
};
</script>





