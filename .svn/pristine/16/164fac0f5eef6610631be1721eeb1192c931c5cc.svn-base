<template>
    <div>
        <!-- 选择业绩员工, 收银 -->
        <div>
            <slot></slot>
        </div>
        <div>
            <el-form :inline="false" ref="ruleForm" label-width="80px">
                <el-row :gutter="20" v-for="(item, i) in form" :key="i" :id="i">
                    <el-col :span="12">
                        <el-form-item label="员工">
                            <el-select
                                v-model="item.EmpId"
                                @focus="selectFocusFun"
                                @change="selectChangeFun"
                                clearable
                                placeholder="请选择"
                            >
                                <el-option
                                    v-for="(item,i) in options"
                                    :key="i"
                                    :label="item.NAME"
                                    :value="item.ID"
                                    :disabled="disabledFun(item.ID)"
                                >
                                    <span style="float: left">{{ item.NAME }}</span>
                                    <span
                                        style="float: right; color: #8492a6; font-size: 13px"
                                    >{{ item.CODE }}</span>
                                </el-option>
                            </el-select>
                        </el-form-item>
                    </el-col>
                    <el-col :span="12">
                        <el-form-item label="提成">
                            <el-input
                                type="number"
                                v-model.number="item.Money"
                                @focus="inputFocusFun"
                                @blur="inputBlurFun"
                                clearable
                            ></el-input>
                        </el-form-item>
                    </el-col>
                </el-row>

                <el-form-item>
                    <div class="text-right">
                        <el-button type="primary" @click="onSubmit">确 定</el-button>
                        <el-button @click="closeModal">取消</el-button>
                    </div>
                </el-form-item>
            </el-form>
        </div>
    </div>
</template>
<script>
import { mapGetters } from "vuex";
export default {
    props: {
        pageData: {
            type: Object,
            default: { EmpAddRate: 0, TotalPrice: 0, isShow: false }
        }
    },
    data() {
        return {
            royaltyMoney: 0,
            options: [],
            form: [
                { EmpId: "", Money: 0 },
                { EmpId: "", Money: 0 },
                { EmpId: "", Money: 0 }
            ],
            activeIdx: 0
        };
    },
    computed: {
        ...mapGetters({
            employeeList: "employeeList",
            employeeListState: "employeeListState"
        })
    },
    watch: {
        pageData(data) {
            if (data.isShow) {
                this.royaltyMoney = data.EmpAddRate * data.TotalPrice;
                this.form = [
                    { EmpId: "", Money: 0 },
                    { EmpId: "", Money: 0 },
                    { EmpId: "", Money: 0 }
                ];
            }
        },
        employeeListState(data) {
            if (data.success) {
                this.options = [...this.employeeList];
            }
        }
    },
    methods: {
        selectFocusFun: function(e) {
            this.activeIdx = e.path[5].id;
        },
        inputFocusFun: function(e) {
            this.activeIdx = e.path[4].id;
        },
        selectChangeFun: function(v) {
            let idx = this.activeIdx,
                m = 0;
            let arr = this.form.filter(item => item.EmpId);
            if (arr.length > 0) {
                m = parseFloat(this.royaltyMoney / arr.length).toFixed(2);
            }
            for (let i = 0; i < this.form.length; i++) {
                if (this.form[i].EmpId) this.form[i].Money = parseFloat(m);
            }
            this.form = [...this.form];
        },
        inputBlurFun: function(e) {
            let idx = this.activeIdx,
                m = this.royaltyMoney;
            if (!this.form[idx].Money) this.form[idx].Money = 0;
            if (!this.form[idx].EmpId) this.form[idx].Money = 0;

            let arr = this.form.filter(item => item.EmpId);
            if (arr.length > 0) {
                m = parseFloat(this.royaltyMoney / arr.length).toFixed(2);
            }
            if (this.form[idx].EmpId && this.form[idx].Money > parseFloat(m)) {
                this.form[idx].Money = parseFloat(m);
            }
        },
        disabledFun: function(id) {
            for (let i = 0; i < this.form.length; i++) {
                if (this.form[i].EmpId == id) {
                    return true;
                }
            }
            return false;
        },

        closeModal() {
            this.$emit("closeModal");
        },
        onSubmit() {
            let arr = this.form.filter(item => item.EmpId);
            let percent = parseFloat(100 / arr.length).toFixed(2);
            let newArr = [];
            for (let i = 0; i < arr.length; i++) {
                let dd = this.employeeList.find(
                    item => item.ID == arr[i].EmpId
                );
                newArr.push(
                    Object.assign(dd, arr[i], {
                        Name: dd.NAME,
                        Percent: percent
                    })
                );
            }
            this.$emit("resultArr", newArr);
        }
    },
    created() {
        if (this.employeeList.length == 0) {
            this.$store.dispatch("getEmployeeList", {});
        } else {
            this.options = [...this.employeeList];
        }
    }
};
</script>
